name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Default permissions are read-only
permissions: read-all

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    permissions:
      contents: read # Needed for checkout and linting tools
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: phpcs # Install only tools needed for this job

      # Node.js setup removed unless required for JS linting tools not covered by package.json
      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '20'

      # Shellcheck install via npm removed - using action below

      - name: Lint PHP files
        # Consider linting all PHP files: run: phpcs --standard=PSR12 .
        run: phpcs --standard=PSR12 wp-social-auth.php

      - name: Lint Shell scripts (using action)
        uses: ludeeus/action-shellcheck@v2.0.0 # Pin to specific version
        # Action discovers scripts automatically. Configure 'scan_paths' if needed.

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read          # REQUIRED to checkout and scan files
      security-events: write # REQUIRED to upload CodeQL results
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Recommended for CodeQL

      # Add PHP Setup if scanning PHP with CodeQL
      - name: Set up PHP
        if: contains(matrix.language, 'php') || true # Run if PHP exists in a potential matrix, or always if matrix isn't used
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none
          tools: none

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@0.20.0 # Pin to specific version
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1' # Fail workflow if specified vulnerabilities found
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          # Add 'php' if desired
          languages: javascript # , php
          # Use custom config if desired
          # config-file: ./.github/codeql/codeql-config.yml

      # Autobuild step not needed for JS/PHP

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        # This will now fail the workflow on findings by default

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read   # REQUIRED for checkout
      actions: write  # REQUIRED for cache-to: type=gha
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: wordpress-gmail-cli:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Make scripts executable
        # Adjust scope if needed, e.g., bin/**/*.sh
        run: chmod +x bin/*.sh

      - name: Test Docker image
        run: bin/test-docker.sh # Assumes this script exists

      - name: Test shell scripts
        run: bin/test-scripts.sh # Assumes this script exists

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build] # Ensure build job passes before releasing
    permissions:
      contents: write   # REQUIRED to create release/tag
      packages: write  # REQUIRED to push packages (Docker image to GHCR)
    # Run only on push to main with specific commit message
    if: >
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      contains(github.event.head_commit.message, 'chore: release v') # Match 'chore: release vX.Y.Z'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for release notes generation / tag info

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from commit message
        id: version
        run: |
          # Extract version X.Y.Z from commit message like "chore: release vX.Y.Z ..."
          if [[ "${{ github.event.head_commit.message }}" =~ chore:\ release\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            # Basic validation
            if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Extracted version: $VERSION"
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            else
              echo "Error: Invalid version format extracted: $VERSION" >&2
              exit 1
            fi
          else
            echo "Error: Commit message does not contain 'chore: release vX.Y.Z'." >&2
            echo "Commit message was: ${{ github.event.head_commit.message }}" >&2
            exit 1 # Fail if version not found
          fi

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          # Use repository name which includes owner: owner/repo
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1 # Or pin to specific v1.x.y
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          generate_release_notes: true # Auto-generate release notes from commits
          # Verify these file paths are correct relative to the repo root
          files: |
            bin/wordpress-gmail-cli.sh
            wp-social-auth.php
            bin/enhance-ssl-security.sh