name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Default permissions are read-only; jobs request specific write perms
permissions: read-all

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    permissions:
      contents: read # Permission to checkout and read code
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: phpcs # Only install tools needed for linting here

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Note: Consider installing JS linters (e.g., ESLint) via npm dependencies (package.json)
      # - name: Install JS Dependencies
      #   run: npm ci
      # - name: Lint JavaScript files
      #   run: npm run lint # Assuming you have a lint script in package.json

      - name: Lint PHP files (informational only)
        # Adjust path/scope as needed (e.g., '.' for all files, 'src/')
        run: phpcs --standard=PSR12 . || true

      # Shellcheck is run via action in the security-scan job for consistency
      # If preferred here, use the ludeeus/action-shellcheck action instead of npm install -g

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read          # To checkout code and read files for scanning
      security-events: write # To upload CodeQL results
      actions: read          # Potentially needed by some security actions (TBC)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Recommended for CodeQL analysis accuracy

      # Set up PHP is required if analyzing PHP with CodeQL
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2' # Match the version used elsewhere
          coverage: none     # Disable coverage unless needed
          tools: none        # No extra tools needed just for CodeQL scan

      - name: Run ShellCheck (informational only)
        uses: ludeeus/action-shellcheck@v2.0.0 # Pin to a specific version
        continue-on-error: true
        with:
          check_together: 'yes' # Optional: Report all files together

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@0.20.0 # Pin to a specific version
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '0' # Don't fail workflow on vulnerabilities
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH' # Scan for critical and high severity issues

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          # Add 'php' to scan both languages
          languages: javascript, php
          # Use the custom config file if desired
          config-file: ./.github/codeql/codeql-config.yml
          # Example query suites (if not using config file):
          # queries: +security-extended,security-and-quality

      # Autobuild step is not needed for JS/PHP

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true # Makes CodeQL informational

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read    # To checkout code
      actions: write   # To write to GitHub Actions cache (for cache-to: type=gha)
      packages: write  # Add if pushing Docker image to GHCR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false # Set to true to push to a registry
          load: true  # Load image into docker daemon for testing
          tags: wordpress-gmail-cli:test # Customize image tag
          # Enable caching using GitHub Actions cache
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image (informational only)
        # Simple smoke test: check if the container runs and responds to --help
        run: docker run --rm wordpress-gmail-cli:test --help
        continue-on-error: true # Makes the test step informational