name: Docker Build and Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ] # Trigger on version tags like v1.0, v2.3.4
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read          # To checkout code
      packages: write        # To push docker image to GHCR
      security-events: write # To upload Trivy SARIF results
      actions: write         # REQUIRED for GHA cache `cache-to`

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }} # ghcr.io/owner/repo format
          tags: |
            # generate semver tags (1.2.3, 1.2) from git tags like v1.2.3
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # generate tag from branch name for branch pushes
            type=ref,event=branch
            # generate tag from PR number for pull requests
            type=ref,event=pr
            # generate tag from commit sha
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        # Skip login for PRs triggered from forks (secrets not available) or if just building
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Push only when triggered by non-PR events (push to main, tag push)
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enable layer caching using GHA backend
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run